// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
$baseline_px: 16px;

@mixin rem($property, $px_values) {

    // Convert the baseline into rems
    $baseline_rem: ($baseline_px / 1rem);

    // Print the first line in pixel values
    #{$property}: $px_values;

    // If there is only one (numeric) value, return the property/value line for it.
    @if type-of($px_values) == 'number' {
        #{$property}: $px_values / $baseline_rem;
    }

    // If there is more than one value, create a list and perform equations on each value
    @else {

        // Create an empty list that we can dump values into
        $rem_values: ();

        @each $value in $px_values {

            // If the value is zero, return 0
            @if $value == 0 {
                $rem_values: append($rem_values, $value);
            }

            // If the value is not zero, convert it from px to rem
            @else {
                $rem_values: append($rem_values, ($value / $baseline_rem) );
            }
        }

        // Return the property and its list of converted values
        #{$property}: $rem_values;
    }
}

@mixin custom-scrollbar {
  &::-webkit-scrollbar {
    width: 20px;
  }

  &::-webkit-scrollbar-track,
  &::-webkit-scrollbar-thumb {
    border-left: solid 8px transparent;
    border-right: solid 8px transparent;
  }

  &::-webkit-scrollbar-track {
    box-shadow: inset 0 0 10px 10px $gray-300;
  }
  
  &::-webkit-scrollbar-thumb {
    box-shadow: inset 0 0 10px 10px $blue-theme;
  }
}

/********** GENERATE SVG URL **********/
@function svg-url($svg) {
	$encoded: "";
	$slice: 2000;
	$index: 0;
	$loops: ceil(str-length($svg) / $slice);
	@for $i from 1 through $loops {
		$chunk: str-slice($svg, $index, $index + $slice - 1); 

		$chunk: str-replace($chunk, '"', "'");
		$chunk: str-replace($chunk, "<", "%3C");
		$chunk: str-replace($chunk, ">", "%3E");
		$chunk: str-replace($chunk, "&", "%26");
		$chunk: str-replace($chunk, "#", "%23");
		$encoded: #{$encoded}#{$chunk};
		$index: $index + $slice;
	}
	@return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}


/********** RETURNS SVG URL FOR BACKGROUND IMAGE AND CHANGE SVGS COLORS **********/
/********** Uses svgs from svg-assets.scss with 'color' or 'color-x' params **********/
@function use-svg($key, $new-fill...) {
	$length: length($new-fill);
	$result: map-get($svg, $key);

	@if $length == 1 {
		$result: str-replace($result, "color", $new-fill);
	} @else {
		@for $i from 1 through $length {
			$result: str-replace($result, "color-" + $i, nth($new-fill, $i));
		}
	}

	@return svg-url("#{$result}");
}

// -------
@mixin max-lines($number-of-lines) {
  display: -webkit-box;
  -webkit-line-clamp: $number-of-lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
  hyphens: auto;
}

@mixin btn-confira {
  position: relative;
  @extend %primary-button-large;
  padding: 15px 40px;
  &:after {
    content: "";
    display: inline-block;
    background: use-svg(button-arrow, $white) no-repeat center center;
    width: 28px;
    height: 10px;
    margin-left: 15px;
    vertical-align: middle;
    
    @include media-breakpoint-up(sm) {
      margin-top: -3px;
    }
  }
  &:hover {
    &:after {
      background: use-svg(button-arrow, $blue-theme) no-repeat center center;
    }
  }
}